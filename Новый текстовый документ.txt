# Python Syntax
# Python Indentation
# Example
if 5 > 2:
    print("Five is greater than two!")

# Syntax ERROR
if 5 > 2:
print("Five is greater than two!")

# The number of spaces
if 5 > 2:
 print("Five is greater than two!")
 if 5 > 2:
        print("Five is greater than two!")

# The number of spaces ERROR
if 5 > 2:
 print("Five is greater than two!")
        print("Five is greater than two!")
  

# Python Variables Example Creating 
x = 5
y = "John"
print(x)
print(y)

# particular type
x = 4
x = "Sally"
print(x)

# Variable Casting
x = str(3)
y = int(3)
z = float(3)

print(x)
print(y)
print(z)

# Get the type
x = 5
y = "John"
print(type(x))
print(type(y))

# Python Single or Double
x = "John"
print(x)
#double quotes are the same as single quotes:
x = 'John'
print(x)

# Case-Sensitive
a = 4
A = "Sally"
print(a)
print(A)


# Variable Names
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "Jhon"
myvar2 = "John"

print(myvar)
print(my_var)
print(_my_var)
print(myVar)
print(MYVAR)
print(myvar2)

# Illegal variable names
2myvar = "John"
my-var = "John"
my var = "John"


# Variables Assign Multiple
# Many Values to Multiple
x, y, z = "Orange", "Banana", "Cherry"

print(x)
print(y)
print(z)
# One Value to Multiple
x = y = z = "Orange"
print(x)
print(y)
print(z)
# Unpack a Collection
fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)


# Output Variable
x = "Python is awesome"
print(x)

# Multiple variable
x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

# + operator
x = "Python"
y = "is"
z = "awesome"
print(x + y + z)

# math operator
x = 5
y = 10
print(x+y)

# + operator an ERROR
x = 5
y = "John"
print(x + y)

x = 5
y = "John"
print(x,y)

# Global Variable
# Create a variable outside of a function, and use it inside the function
x = "awesome"

def myfunc():
    print("Python is " + x)

myfunc()
# Create a variable inside a function, with the same name as the global variable
x = "awesome"

def myfunc():
    x = "fantastic"
    print("Python is " + x)

myfunc()

print("Python is " + x)
# Global scope
def myfunc():
    global x
    x = "fantastic"

myfunc()

print("Python is " + x)
# Global keyword
x = "awesome"

def myfunc():
    global x
    x = "fantastic"

myfunc()

print("Python is " + x)


# Python Data Types
x = 5
print(type(x))   # Answer <class 'int'>


# Setting the Data Type
# Example 1 Str
x = "Hello World"
# display x:
print(x)
# display the data type of x:
print(type(x))   # Answer: <class 'str'>

# Example 2 Int
x = 20
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'int'>

# Example 3 Float
x = 20.5
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'float'>

# Example 4 Complex
x = 1j
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'complex'>

# Example 5 List
x = ["apple", "banana", "cherry"]
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'list'>

# Example 6 Tuple
x = ("apple", "banana", "cherry")
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'tuple'>

# Example 7 Range
x = range(6)
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'range'>

# Example 8 Dict
x = {"name" : "John", "age" : 36}
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'dict'>

# Example 9 Frozenset
x = frozenset({"apple", "banana", "cherry"})
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'frozenset'>

# Example 10 Bool
x = True
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'bool'>

# Example 11 Bytes
x = b"Hello"
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'bytes'>

# Example 12 Bytearray
x = bytearray(5)
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'bytearray'>

# Example 13 Memoryview
x = memoryview(bytes(5))
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'memoryview'>

# Example 14 NoneType
x = None
# display x:
print(x)
# display the data type of x:
print(type(x))     # Answer: <class 'NoneType'>


# Python Numbers
# int, float, complex
x = 1
y = 2.8
z = 1j

print(type(x))       # int
print(type(y))       # float
print(type(z))       # complex
# Integers
x = 1
y = 35656222554887711
z = -3255522

print(type(x))      # int
print(type(y))      # int
print(type(z))      # int
# Floats
x = 1.10
y = 1.0
z = -35.59

print(type(x))   # float
print(type(y))   # float
print(type(z))   # float
# Floats "e"
x = 35e3
y = 12E4
z = -87.7e100

print(type(x))   # float
print(type(y))   # float
print(type(z))   # float
# Complex "j"
x = 3+5j
y = 5j
z = -5j
print(type(x))   # complex
print(type(y))   # complex
print(type(z))   # complex
# Type Conversion
# Convert
x = 1      # int
y = 2.8    # float
z = 1j     # complex
# convert from int to float:
a = float(x)
# convert from float to int:
b = int(y)
# convert from int to complex:
c = complex(x)

print(a)
print(b)
print(c)
print(type(a))
print(type(b))
print(type(c))
# Random Number
import random

print(random.randrange(1, 10))


# Python Casting

# Integers
x = int(1)   # x will be 1
y = int(2.8)  # y will be 2
z = int("3")   # z will be 3
print(x)
print(y)
print(z)

# Floats
x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2")    # w will be 4.2
print(x)
print(y)
print(z)
print(w)

# Strings
x = str("s1")   # x will be 's1'
y = str(2)      # y will be '2'
z = str(3.0)    # z will be '3.0'
print(x)
print(y)
print(z)


# Python Strings
# Assign String
a = "Hello"
print(a)

# Multiline Strings
a = """ Loren ipsum dolor sit amet, 
consectetur adipiscing elit,
sed do eiusmod tempor incididunt 
ut labore et dolore magna aliqua."""
print(a)
# Or
a = ''' Loren ipsum dolor sit amet, 
consectetur adipiscing elit,
sed do eiusmod tempor incididunt 
ut labore et dolore magna aliqua.'''
print(a)
